{"version":3,"file":"formik.cjs.production.js","sources":["../src/connect.tsx","../src/utils.ts","../src/Formik.tsx","../src/Field.tsx","../src/Form.tsx","../src/FieldArray.tsx","../src/FastField.tsx","../src/ErrorMessage.tsx","../src/withFormik.tsx"],"sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport createContext from 'create-react-context';\nimport { FormikContext } from './types';\n\nexport const {\n  Provider: FormikProvider,\n  Consumer: FormikConsumer,\n} = createContext<FormikContext<any>>({} as any);\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContext<Values> }>\n) {\n  const C: React.SFC<OuterProps> = (props: OuterProps) => (\n    <FormikConsumer>\n      {formik => <Comp {...props} formik={formik} />}\n    </FormikConsumer>\n  );\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.SFC<OuterProps> & {\n    WrappedComponent: React.ReactNode;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics<\n    OuterProps,\n    OuterProps & { formik: FormikContext<Values> }\n  >(\n    C,\n    Comp as React.ComponentClass<OuterProps & { formik: FormikContext<Values> }> // cast type to ComponentClass (even if SFC)\n  );\n}\n","import cloneDeep from 'lodash/cloneDeep';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via its path.\n * @see https://github.com/developit/linkstate\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = {};\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (resVal[currentPath]) {\n      resVal = resVal[currentPath];\n    } else if (currentObj) {\n      resVal = resVal[currentPath] = cloneDeep(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  const result = { ...obj, ...res };\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete result[pathArray[i]];\n  }\n\n  return result;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n\n// Assertions\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): boolean =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Make a promise cancellable by @istarkov\n * @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n */\nexport function makeCancelable<T extends Promise<any>>(\n  promise: T\n): [T, () => void] {\n  let hasCanceled: boolean = false;\n\n  const wrappedPromise: any = new Promise((resolve, reject) => {\n    promise.then(\n      val => (hasCanceled ? reject({ isCanceled: true }) : resolve(val)),\n      error => (hasCanceled ? reject({ isCanceled: true }) : reject(error))\n    );\n  });\n\n  return [\n    wrappedPromise,\n    function cancel() {\n      hasCanceled = true;\n    },\n  ];\n}\n","import * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport { FormikProvider } from './connect';\nimport warning from 'tiny-warning';\nimport {\n  FormikActions,\n  FormikConfig,\n  FormikErrors,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n  FormikContext,\n  FormikProps,\n} from './types';\nimport {\n  isEmptyChildren,\n  isFunction,\n  isNaN,\n  isPromise,\n  isString,\n  setIn,\n  setNestedObjectValues,\n  getActiveElement,\n  getIn,\n  makeCancelable,\n} from './utils';\n\nexport class Formik<Values = FormikValues> extends React.Component<\n  FormikConfig<Values>,\n  FormikState<Values>\n> {\n  static defaultProps = {\n    validateOnChange: true,\n    validateOnBlur: true,\n    isInitialValid: false,\n    enableReinitialize: false,\n  };\n\n  initialValues: Values;\n  didMount: boolean;\n  hcCache: {\n    [key: string]: (e: string | React.ChangeEvent<any>) => void;\n  } = {};\n  hbCache: {\n    [key: string]: (e: any) => void;\n  } = {};\n  fields: {\n    [field: string]: React.Component<any>;\n  };\n  validator: any;\n\n  constructor(props: FormikConfig<Values>) {\n    super(props);\n    this.state = {\n      values: props.initialValues || ({} as any),\n      errors: {},\n      touched: {},\n      isSubmitting: false,\n      isValidating: false,\n      submitCount: 0,\n      status: props.initialStatus,\n    };\n    this.didMount = false;\n    this.fields = {};\n    this.initialValues = props.initialValues || ({} as any);\n    warning(\n      !(props.component && props.render),\n      'You should not use <Formik component> and <Formik render> in the same <Formik> component; <Formik render> will be ignored'\n    );\n\n    warning(\n      !(props.component && props.children && !isEmptyChildren(props.children)),\n      'You should not use <Formik component> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\n    );\n\n    warning(\n      !(props.render && props.children && !isEmptyChildren(props.children)),\n      'You should not use <Formik render> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\n    );\n  }\n\n  registerField = (name: string, Comp: React.Component<any>) => {\n    this.fields[name] = Comp;\n  };\n\n  unregisterField = (name: string) => {\n    delete this.fields[name];\n  };\n\n  componentDidMount() {\n    this.didMount = true;\n  }\n\n  componentWillUnmount() {\n    // This allows us to prevent setting state on an\n    // unmounted component. This can occur if Formik is in a modal, and submission\n    // toggles show/hide, and validation of a blur field takes longer than validation\n    // before a submit.\n    // @see https://github.com/jaredpalmer/formik/issues/597\n    // @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n    this.didMount = false;\n\n    // Cancel validation on unmount.\n    if (this.validator) {\n      this.validator();\n    }\n  }\n\n  componentDidUpdate(prevProps: Readonly<FormikConfig<Values>>) {\n    // If the initialValues change, reset the form\n    if (\n      this.props.enableReinitialize &&\n      !isEqual(prevProps.initialValues, this.props.initialValues)\n    ) {\n      this.initialValues = this.props.initialValues;\n      // @todo refactor to use getDerivedStateFromProps?\n      this.resetForm(this.props.initialValues);\n    }\n  }\n\n  setErrors = (errors: FormikErrors<Values>) => {\n    this.setState({ errors });\n  };\n\n  setTouched = (touched: FormikTouched<Values>) => {\n    this.setState({ touched }, () => {\n      if (this.props.validateOnBlur) {\n        this.runValidations(this.state.values);\n      }\n    });\n  };\n\n  setValues = (values: FormikState<Values>['values']) => {\n    this.setState({ values }, () => {\n      if (this.props.validateOnChange) {\n        this.runValidations(values);\n      }\n    });\n  };\n\n  setStatus = (status?: any) => {\n    this.setState({ status });\n  };\n\n  setError = (error: any) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        `Warning: Formik\\'s setError(error) is deprecated and may be removed in future releases. Please use Formik\\'s setStatus(status) instead. It works identically. For more info see https://github.com/jaredpalmer/formik#setstatus-status-any--void`\n      );\n    }\n    this.setState({ error });\n  };\n\n  setSubmitting = (isSubmitting: boolean) => {\n    if (this.didMount) {\n      this.setState({ isSubmitting });\n    }\n  };\n\n  /**\n   * Run field level validation\n   */\n  validateField = (field: string): Promise<Object> => {\n    this.setState({ isValidating: true });\n    return this.runSingleFieldLevelValidation(\n      field,\n      getIn(this.state.values, field)\n    ).then(error => {\n      if (this.didMount) {\n        this.setState({\n          errors: setIn(this.state.errors, field, error),\n          isValidating: false,\n        });\n      }\n      return error;\n    });\n  };\n\n  runSingleFieldLevelValidation = (\n    field: string,\n    value: void | string\n  ): Promise<string> => {\n    return new Promise(resolve =>\n      resolve(this.fields[field].props.validate(value))\n    ).then(x => x, e => e);\n  };\n\n  runFieldLevelValidations(\n    values: FormikValues\n  ): Promise<FormikErrors<Values>> {\n    const fieldKeysWithValidation: string[] = Object.keys(this.fields).filter(\n      f =>\n        this.fields &&\n        this.fields[f] &&\n        this.fields[f].props.validate &&\n        isFunction(this.fields[f].props.validate)\n    );\n\n    // Construct an array with all of the field validation functions\n    const fieldValidations: Promise<string>[] =\n      fieldKeysWithValidation.length > 0\n        ? fieldKeysWithValidation.map(f =>\n            this.runSingleFieldLevelValidation(f, getIn(values, f))\n          )\n        : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n    return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n      fieldErrorsList.reduce(\n        (prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (!!curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        },\n        {} as FormikErrors<Values>\n      )\n    );\n  }\n\n  runValidateHandler(values: FormikValues): Promise<FormikErrors<Values>> {\n    return new Promise(resolve => {\n      const maybePromisedErrors = (this.props.validate as any)(values);\n      if (maybePromisedErrors === undefined) {\n        resolve({});\n      } else if (isPromise(maybePromisedErrors)) {\n        (maybePromisedErrors as Promise<any>).then(\n          () => {\n            resolve({});\n          },\n          errors => {\n            resolve(errors);\n          }\n        );\n      } else {\n        resolve(maybePromisedErrors);\n      }\n    });\n  }\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  runValidationSchema = (values: FormikValues) => {\n    return new Promise(resolve => {\n      const { validationSchema } = this.props;\n      const schema = isFunction(validationSchema)\n        ? validationSchema()\n        : validationSchema;\n      validateYupSchema(values, schema).then(\n        () => {\n          resolve({});\n        },\n        (err: any) => {\n          resolve(yupToFormErrors(err));\n        }\n      );\n    });\n  };\n\n  /**\n   * Run all validations methods and update state accordingly\n   */\n  runValidations = (\n    values: FormikValues = this.state.values\n  ): Promise<FormikErrors<Values>> => {\n    if (this.validator) {\n      this.validator();\n    }\n\n    const [promise, cancel] = makeCancelable(\n      Promise.all([\n        this.runFieldLevelValidations(values),\n        this.props.validationSchema ? this.runValidationSchema(values) : {},\n        this.props.validate ? this.runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, handlerErrors]) => {\n        return deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, handlerErrors],\n          { arrayMerge }\n        );\n      })\n    );\n    this.validator = cancel;\n    return promise\n      .then((errors: FormikErrors<Values>) => {\n        if (this.didMount) {\n          this.setState(prevState => {\n            if (!isEqual(prevState.errors, errors)) {\n              return { errors };\n            }\n            return null; // abort the update\n          });\n        }\n        return errors;\n      })\n      .catch(x => x);\n  };\n\n  handleChange = (\n    eventOrPath: string | React.ChangeEvent<any>\n  ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n    // @todo someone make this less disgusting.\n    //\n    // executeChange is the core of handleChange, we'll use it cache change\n    // handlers like Preact's linkState.\n    const executeChange = (\n      eventOrTextValue: string | React.ChangeEvent<any>,\n      maybePath?: string\n    ) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as React.ChangeEvent<any>).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n        } = (eventOrTextValue as React.ChangeEvent<any>).target;\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && process.env.NODE_ENV !== 'production') {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) ? checked : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        this.setState(\n          prevState => ({\n            ...prevState,\n            values: setIn(prevState.values, field!, val),\n          }),\n          () => {\n            if (this.props.validateOnChange) {\n              this.runValidations(setIn(this.state.values, field!, val));\n            }\n          }\n        );\n      }\n    };\n\n    // Actually execute logic above....\n    // cache these handlers by key like Preact's linkState does for perf boost\n    if (isString(eventOrPath)) {\n      return isFunction(this.hcCache[eventOrPath])\n        ? this.hcCache[eventOrPath] // return the cached handled\n        : (this.hcCache[eventOrPath] = (\n            // make a new one\n            event: React.ChangeEvent<any> | string\n          ) =>\n            executeChange(\n              event /* string or event, does not matter */,\n              eventOrPath /* this is path to the field now */\n            ));\n    } else {\n      executeChange(eventOrPath);\n    }\n  };\n\n  setFieldValue = (\n    field: string,\n    value: any,\n    shouldValidate: boolean = true\n  ) => {\n    if (this.didMount) {\n      // Set form field by name\n      this.setState(\n        prevState => ({\n          ...prevState,\n          values: setIn(prevState.values, field, value),\n        }),\n        () => {\n          if (this.props.validateOnChange && shouldValidate) {\n            this.runValidations(this.state.values);\n          }\n        }\n      );\n    }\n  };\n\n  handleSubmit = (e: React.FormEvent<HTMLFormElement> | undefined) => {\n    if (e && e.preventDefault) {\n      e.preventDefault();\n    }\n\n    // Warn if form submission is triggered by a <button> without a\n    // specified `type` attribute during development. This mitigates\n    // a common gotcha in forms with both reset and submit buttons,\n    // where the dev forgets to add type=\"button\" to the reset button.\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof document !== 'undefined'\n    ) {\n      // Safely get the active element (works with IE)\n      const activeElement = getActiveElement();\n      if (\n        activeElement !== null &&\n        activeElement instanceof HTMLButtonElement\n      ) {\n        warning(\n          !!(\n            activeElement.attributes &&\n            activeElement.attributes.getNamedItem('type')\n          ),\n          'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n        );\n      }\n    }\n\n    this.submitForm();\n  };\n\n  submitForm = () => {\n    // Recursively set all values to `true`.\n    this.setState(prevState => ({\n      touched: setNestedObjectValues<FormikTouched<Values>>(\n        prevState.values,\n        true\n      ),\n      isSubmitting: true,\n      isValidating: true,\n      submitCount: prevState.submitCount + 1,\n    }));\n\n    return this.runValidations(this.state.values).then(combinedErrors => {\n      if (this.didMount) {\n        this.setState({ isValidating: false });\n      }\n      const isValid = Object.keys(combinedErrors).length === 0;\n      if (isValid) {\n        this.executeSubmit();\n      } else if (this.didMount) {\n        // ^^^ Make sure Formik is still mounted before calling setState\n        this.setState({ isSubmitting: false });\n      }\n    });\n  };\n\n  executeSubmit = () => {\n    this.props.onSubmit(this.state.values, this.getFormikActions());\n  };\n\n  handleBlur = (eventOrString: any): void | ((e: any) => void) => {\n    const executeBlur = (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && process.env.NODE_ENV !== 'production') {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      this.setState(prevState => ({\n        touched: setIn(prevState.touched, field, true),\n      }));\n\n      if (this.props.validateOnBlur) {\n        this.runValidations(this.state.values);\n      }\n    };\n\n    if (isString(eventOrString)) {\n      // cache these handlers by key like Preact's linkState does for perf boost\n      return isFunction(this.hbCache[eventOrString])\n        ? this.hbCache[eventOrString]\n        : (this.hbCache[eventOrString] = (event: any) =>\n            executeBlur(event, eventOrString));\n    } else {\n      executeBlur(eventOrString);\n    }\n  };\n\n  setFieldTouched = (\n    field: string,\n    touched: boolean = true,\n    shouldValidate: boolean = true\n  ) => {\n    // Set touched field by name\n    this.setState(\n      prevState => ({\n        ...prevState,\n        touched: setIn(prevState.touched, field, touched),\n      }),\n      () => {\n        if (this.props.validateOnBlur && shouldValidate) {\n          this.runValidations(this.state.values);\n        }\n      }\n    );\n  };\n\n  setFieldError = (field: string, message: string | undefined) => {\n    // Set form field by name\n    this.setState(prevState => ({\n      ...prevState,\n      errors: setIn(prevState.errors, field, message),\n    }));\n  };\n\n  resetForm = (nextValues?: Values) => {\n    const values = nextValues ? nextValues : this.props.initialValues;\n\n    this.initialValues = values;\n\n    this.setState({\n      isSubmitting: false,\n      isValidating: false,\n      errors: {},\n      touched: {},\n      error: undefined,\n      status: this.props.initialStatus,\n      values,\n      submitCount: 0,\n    });\n  };\n\n  handleReset = () => {\n    if (this.props.onReset) {\n      const maybePromisedOnReset = (this.props.onReset as any)(\n        this.state.values,\n        this.getFormikActions()\n      );\n\n      if (isPromise(maybePromisedOnReset)) {\n        (maybePromisedOnReset as Promise<any>).then(this.resetForm);\n      } else {\n        this.resetForm();\n      }\n    } else {\n      this.resetForm();\n    }\n  };\n\n  setFormikState = (s: any, callback?: (() => void)) =>\n    this.setState(s, callback);\n\n  validateForm = (values: Values) => {\n    this.setState({ isValidating: true });\n    return this.runValidations(values).then(errors => {\n      if (this.didMount) {\n        this.setState({ isValidating: false });\n      }\n      return errors;\n    });\n  };\n\n  getFormikActions = (): FormikActions<Values> => {\n    return {\n      resetForm: this.resetForm,\n      submitForm: this.submitForm,\n      validateForm: this.validateForm,\n      validateField: this.validateField,\n      setError: this.setError,\n      setErrors: this.setErrors,\n      setFieldError: this.setFieldError,\n      setFieldTouched: this.setFieldTouched,\n      setFieldValue: this.setFieldValue,\n      setStatus: this.setStatus,\n      setSubmitting: this.setSubmitting,\n      setTouched: this.setTouched,\n      setValues: this.setValues,\n      setFormikState: this.setFormikState,\n    };\n  };\n\n  getFormikComputedProps = () => {\n    const { isInitialValid } = this.props;\n    const dirty = !isEqual(this.initialValues, this.state.values);\n    return {\n      dirty,\n      isValid: dirty\n        ? this.state.errors && Object.keys(this.state.errors).length === 0\n        : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: this['props']) => boolean)(this.props)\n          : (isInitialValid as boolean),\n      initialValues: this.initialValues,\n    };\n  };\n\n  getFormikBag = () => {\n    return {\n      ...this.state,\n      ...this.getFormikActions(),\n      ...this.getFormikComputedProps(),\n      // Field needs to communicate with Formik during resets\n      registerField: this.registerField,\n      unregisterField: this.unregisterField,\n      handleBlur: this.handleBlur,\n      handleChange: this.handleChange,\n      handleReset: this.handleReset,\n      handleSubmit: this.handleSubmit,\n      validateOnChange: this.props.validateOnChange,\n      validateOnBlur: this.props.validateOnBlur,\n    };\n  };\n\n  getFormikContext = (): FormikContext<any> => {\n    return {\n      ...this.getFormikBag(),\n      validationSchema: this.props.validationSchema,\n      validate: this.props.validate,\n      initialValues: this.initialValues,\n    };\n  };\n\n  render() {\n    const { component, render, children } = this.props;\n    const props = this.getFormikBag();\n    const ctx = this.getFormikContext();\n    return (\n      <FormikProvider value={ctx}>\n        {component\n          ? React.createElement(component as any, props)\n          : render\n            ? render(props)\n            : children // children come last, always called\n              ? isFunction(children)\n                ? (children as ((\n                    props: FormikProps<Values>\n                  ) => React.ReactNode))(props as FormikProps<Values>)\n                : !isEmptyChildren(children)\n                  ? React.Children.only(children)\n                  : null\n              : null}\n      </FormikProvider>\n    );\n  }\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n\n    ${htmlContent}\n\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: any = {} as FormikErrors<Values>;\n  if (yupError.inner.length === 0) {\n    return setIn(errors, yupError.path, yupError.message);\n  }\n  for (let err of yupError.inner) {\n    if (!errors[err.path]) {\n      errors = setIn(errors, err.path, err.message);\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  let validateData: Partial<T> = {};\n  for (let k in values) {\n    if (values.hasOwnProperty(k)) {\n      const key = String(k);\n      validateData[key] = values[key] !== '' ? values[key] : undefined;\n    }\n  }\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n","import * as React from 'react';\n\nimport { connect } from './connect';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContext,\n  FormikHandlers,\n} from './types';\nimport warning from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\n\n/**\n * Note: These typings could be more restrictive, but then it would limit the\n * reusability of custom <Field/> components.\n *\n * @example\n * interface MyProps {\n *   ...\n * }\n *\n * export const MyInput: React.SFC<MyProps & FieldProps> = ({\n *   field,\n *   form,\n *   ...props\n * }) =>\n *   <div>\n *     <input {...field} {...props}/>\n *     {form.touched[field.name] && form.errors[field.name]}\n *   </div>\n */\nexport interface FieldProps<V = any> {\n  field: {\n    /** Classic React change handler, keyed by input name */\n    onChange: FormikHandlers['handleChange'];\n    /** Mark input as touched */\n    onBlur: FormikHandlers['handleBlur'];\n    /** Value of the input */\n    value: any;\n    /* name of the input */\n    name: string;\n  };\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport interface FieldConfig {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n    | string\n    | React.ComponentType<FieldProps<any>>\n    | React.ComponentType<void>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   */\n  render?: ((props: FieldProps<any>) => React.ReactNode);\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<any>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: ((value: any) => string | Promise<void> | undefined);\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = GenericFieldHTMLAttributes & FieldConfig & T;\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FieldInner<Values = {}, Props = {}> extends React.Component<\n  FieldAttributes<Props> & { formik: FormikContext<Values> },\n  {}\n> {\n  constructor(\n    props: FieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    super(props);\n    const { render, children, component } = props;\n    warning(\n      !(component && render),\n      'You should not use <Field component> and <Field render> in the same <Field> component; <Field component> will be ignored'\n    );\n\n    warning(\n      !(component && children && isFunction(children)),\n      'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n    );\n\n    warning(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n    );\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, this);\n  }\n\n  componentDidUpdate(\n    prevProps: FieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, this);\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, this);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      children,\n      component = 'input',\n      formik,\n      ...props\n    } = (this.props as FieldAttributes<Props> & {\n      formik: FormikContext<Values>;\n    }) as any;\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = {\n      value:\n        props.type === 'radio' || props.type === 'checkbox'\n          ? props.value // React uses checked={} for these inputs\n          : getIn(formik.values, name),\n      name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n    };\n    const bag = { field, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(component as any, {\n        ref: innerRef,\n        ...field,\n        ...rest,\n        children,\n      });\n    }\n\n    return React.createElement(component as any, {\n      ...bag,\n      ...props,\n      children,\n    });\n  }\n}\n\nexport const Field = connect<FieldAttributes<any>, any>(FieldInner);\n","import * as React from 'react';\nimport { connect } from './connect';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\nexport const Form = connect<FormikFormProps>(\n  ({ formik: { handleReset, handleSubmit }, ...props }) => (\n    <form onReset={handleReset} onSubmit={handleSubmit} {...props} />\n  )\n);\n\nForm.displayName = 'Form';\n","import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContext,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport { getIn, isEmptyChildren, isFunction, setIn } from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = [...(array || [])];\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (array: any[], indexA: number, indexB: number) => {\n  const copy = [...(array || [])];\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy[index] = value;\n  return copy;\n};\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContext<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContext<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n      validateOnChange,\n      formik: { setFormikState, validateForm },\n    } = this.props;\n    setFormikState(\n      (prevState: FormikState<any>) => {\n        let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n        let updateTouched =\n          typeof alterTouched === 'function' ? alterTouched : fn;\n\n        return {\n          ...prevState,\n          values: setIn(\n            prevState.values,\n            name,\n            fn(getIn(prevState.values, name))\n          ),\n          errors: alterErrors\n            ? setIn(\n                prevState.errors,\n                name,\n                updateErrors(getIn(prevState.errors, name))\n              )\n            : prevState.errors,\n          touched: alterTouched\n            ? setIn(\n                prevState.touched,\n                name,\n                updateTouched(getIn(prevState.touched, name))\n              )\n            : prevState.touched,\n        };\n      },\n      () => {\n        if (validateOnChange) {\n          validateForm();\n        }\n      }\n    );\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (array: any[]) => [...(array || []), cloneDeep(value)],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? [...array] : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n        ? (render as any)(props)\n        : children // children come last, always called\n          ? typeof children === 'function'\n            ? (children as any)(props)\n            : !isEmptyChildren(children) ? React.Children.only(children) : null\n          : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\n\nimport { connect } from './connect';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContext,\n} from './types';\nimport warning from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\n\nexport interface FastFieldProps<V = any> {\n  field: {\n    /** Classic React change handler, keyed by input name */\n    onChange: (e: React.ChangeEvent<any>) => void;\n    /** Mark input as touched */\n    onBlur: (e: any) => void;\n    /** Value of the input */\n    value: any;\n    /* name of the input */\n    name: string;\n  };\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport interface FastFieldConfig<T> {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n    | string\n    | React.ComponentType<FastFieldProps<any>>\n    | React.ComponentType<void>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   */\n  render?: ((props: FastFieldProps<any>) => React.ReactNode);\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?:\n    | ((props: FastFieldProps<any>) => React.ReactNode)\n    | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: ((value: any) => string | Promise<void> | undefined);\n\n  /** Override FastField's default shouldComponentUpdate */\n  shouldUpdate?: (\n    nextProps: T & GenericFieldHTMLAttributes & { formik: FormikContext<any> },\n    props: {}\n  ) => boolean;\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML class */\n  className?: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldAttributes<Props> & { formik: FormikContext<Values> },\n  {}\n> {\n  constructor(\n    props: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    super(props);\n    const { render, children, component } = props;\n    warning(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    warning(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    warning(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(\n    props: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      getIn(this.props.formik.values, this.props.name) !==\n        getIn(props.formik.values, this.props.name) ||\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      this.props.formik.isSubmitting !== props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, this);\n  }\n\n  componentDidUpdate(\n    prevProps: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, this);\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, this);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      children,\n      component = 'input',\n      formik,\n      shouldUpdate,\n      ...props\n    } = (this.props as FastFieldAttributes<Props> & {\n      formik: FormikContext<Values>;\n    }) as any;\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = {\n      value:\n        props.type === 'radio' || props.type === 'checkbox'\n          ? props.value // React uses checked={} for these inputs\n          : getIn(formik.values, name),\n      name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n    };\n    const bag = { field, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(component as any, {\n        ref: innerRef,\n        ...field,\n        ...rest,\n        children,\n      });\n    }\n\n    return React.createElement(component as any, {\n      ...bag,\n      ...props,\n      children,\n    });\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n","import * as React from 'react';\nimport { FormikContext } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: ((errorMessage: string) => React.ReactNode);\n  render?: ((errorMessage: string) => React.ReactNode);\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContext<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContext<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render) ? render(error) : null\n        : children\n          ? isFunction(children) ? children(error) : null\n          : component\n            ? React.createElement(component, rest as any, error)\n            : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContext<any> }\n>(ErrorMessageImpl);\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikActions,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik actions + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikActions<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToStatus?: (props: Props) => any;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.StatelessComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        (val as any)[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikActions<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        const { children, ...props } = this.props as any;\n        return (\n          <Formik\n            {...props}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            initialStatus={\n              config.mapPropsToStatus && config.mapPropsToStatus(this.props)\n            }\n            onSubmit={this.handleSubmit as any}\n            render={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics<OuterProps, OuterProps & FormikProps<Values>>(\n      C,\n      Component as React.ComponentClass<OuterProps & FormikProps<Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<OuterProps>;\n  };\n}\n"],"names":["FormikProvider","FormikConsumer","connect","Comp","C","props","React.createElement","formik","componentDisplayName","displayName","name","constructor","WrappedComponent","hoistNonReactStatics","getIn","obj","key","def","p","path","toPath","length","undefined","setIn","value","res","resVal","i","pathArray","currentPath","currentObj","slice","cloneDeep","nextPath","isInteger","Number","result","setNestedObjectValues","object","visited","response","WeakMap","_a","Object","keys","_i","k","val","isObject","get","set","Array","isArray","isFunction","String","Math","floor","isString","prototype","toString","call","isNaN","isEmptyChildren","children","React.Children","count","isPromise","then","makeCancelable","promise","hasCanceled","Promise","resolve","reject","isCanceled","error","_super","_this","fields","errors","setState","touched","validateOnBlur","runValidations","state","values","validateOnChange","status","isSubmitting","didMount","field","isValidating","runSingleFieldLevelValidation","validate","x","e","validationSchema","schema","validateYupSchema","err","yupToFormErrors","validator","prevState","isEqual","catch","eventOrPath","executeChange","eventOrTextValue","maybePath","parsed","persist","type","name_1","checked","test","parseFloat","hcCache","event","shouldValidate","preventDefault","submitForm","submitCount","combinedErrors","executeSubmit","onSubmit","getFormikActions","eventOrString","executeBlur","hbCache","message","nextValues","initialValues","initialStatus","onReset","maybePromisedOnReset","resetForm","s","callback","validateForm","validateField","setError","setErrors","setFieldError","setFieldTouched","setFieldValue","setStatus","setSubmitting","setTouched","setValues","setFormikState","isInitialValid","dirty","isValid","getFormikComputedProps","registerField","unregisterField","handleBlur","handleChange","handleReset","handleSubmit","getFormikBag","warning","component","render","tslib_1.__extends","Formik","this","prevProps","enableReinitialize","fieldKeysWithValidation","filter","f","fieldValidations","map","all","fieldErrorsList","reduce","prev","curr","index","maybePromisedErrors","ctx","getFormikContext","only","React.Component","yupError","inner","sync","context","validateData","hasOwnProperty","abortEarly","arrayMerge","target","source","options","destination","forEach","shouldClone","clone","isMergeableObject","deepmerge","indexOf","push","Field","FieldInner","_b","restOfFormik","onChange","onBlur","bag","form","innerRef","rest","ref","Form","move","array","from","to","copy","splice","swap","indexA","indexB","a","insert","replace","FieldArray","fn","alterTouched","alterErrors","updateErrors","updateTouched","updateArrayField","arr","unshift","remove","pop","bind","FieldArrayInner","tmp","arrayHelpers","handlePush","handlePop","handleSwap","handleMove","handleInsert","handleReplace","handleUnshift","handleRemove","FastField","FastFieldInner","shouldUpdate","ErrorMessage","ErrorMessageImpl","touch","mapPropsToValues","config","Component","actions","formikProps","mapPropsToStatus","renderFormComponent","doc","document","activeElement","body"],"mappings":"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"}