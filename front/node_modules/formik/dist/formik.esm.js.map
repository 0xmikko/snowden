{"version":3,"file":"formik.esm.js","sources":["../src/utils.ts","../src/Formik.tsx","../src/FieldArray.tsx","../src/ErrorMessage.tsx"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via its path.\n * @see https://github.com/developit/linkstate\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = {};\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (resVal[currentPath]) {\n      resVal = resVal[currentPath];\n    } else if (currentObj) {\n      resVal = resVal[currentPath] = cloneDeep(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  const result = { ...obj, ...res };\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete result[pathArray[i]];\n  }\n\n  return result;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n\n// Assertions\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): boolean =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Make a promise cancellable by @istarkov\n * @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n */\nexport function makeCancelable<T extends Promise<any>>(\n  promise: T\n): [T, () => void] {\n  let hasCanceled: boolean = false;\n\n  const wrappedPromise: any = new Promise((resolve, reject) => {\n    promise.then(\n      val => (hasCanceled ? reject({ isCanceled: true }) : resolve(val)),\n      error => (hasCanceled ? reject({ isCanceled: true }) : reject(error))\n    );\n  });\n\n  return [\n    wrappedPromise,\n    function cancel() {\n      hasCanceled = true;\n    },\n  ];\n}\n","import * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport { FormikProvider } from './connect';\nimport warning from 'tiny-warning';\nimport {\n  FormikActions,\n  FormikConfig,\n  FormikErrors,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n  FormikContext,\n  FormikProps,\n} from './types';\nimport {\n  isEmptyChildren,\n  isFunction,\n  isNaN,\n  isPromise,\n  isString,\n  setIn,\n  setNestedObjectValues,\n  getActiveElement,\n  getIn,\n  makeCancelable,\n} from './utils';\n\nexport class Formik<Values = FormikValues> extends React.Component<\n  FormikConfig<Values>,\n  FormikState<Values>\n> {\n  static defaultProps = {\n    validateOnChange: true,\n    validateOnBlur: true,\n    isInitialValid: false,\n    enableReinitialize: false,\n  };\n\n  initialValues: Values;\n  didMount: boolean;\n  hcCache: {\n    [key: string]: (e: string | React.ChangeEvent<any>) => void;\n  } = {};\n  hbCache: {\n    [key: string]: (e: any) => void;\n  } = {};\n  fields: {\n    [field: string]: React.Component<any>;\n  };\n  validator: any;\n\n  constructor(props: FormikConfig<Values>) {\n    super(props);\n    this.state = {\n      values: props.initialValues || ({} as any),\n      errors: {},\n      touched: {},\n      isSubmitting: false,\n      isValidating: false,\n      submitCount: 0,\n      status: props.initialStatus,\n    };\n    this.didMount = false;\n    this.fields = {};\n    this.initialValues = props.initialValues || ({} as any);\n    warning(\n      !(props.component && props.render),\n      'You should not use <Formik component> and <Formik render> in the same <Formik> component; <Formik render> will be ignored'\n    );\n\n    warning(\n      !(props.component && props.children && !isEmptyChildren(props.children)),\n      'You should not use <Formik component> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\n    );\n\n    warning(\n      !(props.render && props.children && !isEmptyChildren(props.children)),\n      'You should not use <Formik render> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\n    );\n  }\n\n  registerField = (name: string, Comp: React.Component<any>) => {\n    this.fields[name] = Comp;\n  };\n\n  unregisterField = (name: string) => {\n    delete this.fields[name];\n  };\n\n  componentDidMount() {\n    this.didMount = true;\n  }\n\n  componentWillUnmount() {\n    // This allows us to prevent setting state on an\n    // unmounted component. This can occur if Formik is in a modal, and submission\n    // toggles show/hide, and validation of a blur field takes longer than validation\n    // before a submit.\n    // @see https://github.com/jaredpalmer/formik/issues/597\n    // @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n    this.didMount = false;\n\n    // Cancel validation on unmount.\n    if (this.validator) {\n      this.validator();\n    }\n  }\n\n  componentDidUpdate(prevProps: Readonly<FormikConfig<Values>>) {\n    // If the initialValues change, reset the form\n    if (\n      this.props.enableReinitialize &&\n      !isEqual(prevProps.initialValues, this.props.initialValues)\n    ) {\n      this.initialValues = this.props.initialValues;\n      // @todo refactor to use getDerivedStateFromProps?\n      this.resetForm(this.props.initialValues);\n    }\n  }\n\n  setErrors = (errors: FormikErrors<Values>) => {\n    this.setState({ errors });\n  };\n\n  setTouched = (touched: FormikTouched<Values>) => {\n    this.setState({ touched }, () => {\n      if (this.props.validateOnBlur) {\n        this.runValidations(this.state.values);\n      }\n    });\n  };\n\n  setValues = (values: FormikState<Values>['values']) => {\n    this.setState({ values }, () => {\n      if (this.props.validateOnChange) {\n        this.runValidations(values);\n      }\n    });\n  };\n\n  setStatus = (status?: any) => {\n    this.setState({ status });\n  };\n\n  setError = (error: any) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        `Warning: Formik\\'s setError(error) is deprecated and may be removed in future releases. Please use Formik\\'s setStatus(status) instead. It works identically. For more info see https://github.com/jaredpalmer/formik#setstatus-status-any--void`\n      );\n    }\n    this.setState({ error });\n  };\n\n  setSubmitting = (isSubmitting: boolean) => {\n    if (this.didMount) {\n      this.setState({ isSubmitting });\n    }\n  };\n\n  /**\n   * Run field level validation\n   */\n  validateField = (field: string): Promise<Object> => {\n    this.setState({ isValidating: true });\n    return this.runSingleFieldLevelValidation(\n      field,\n      getIn(this.state.values, field)\n    ).then(error => {\n      if (this.didMount) {\n        this.setState({\n          errors: setIn(this.state.errors, field, error),\n          isValidating: false,\n        });\n      }\n      return error;\n    });\n  };\n\n  runSingleFieldLevelValidation = (\n    field: string,\n    value: void | string\n  ): Promise<string> => {\n    return new Promise(resolve =>\n      resolve(this.fields[field].props.validate(value))\n    ).then(x => x, e => e);\n  };\n\n  runFieldLevelValidations(\n    values: FormikValues\n  ): Promise<FormikErrors<Values>> {\n    const fieldKeysWithValidation: string[] = Object.keys(this.fields).filter(\n      f =>\n        this.fields &&\n        this.fields[f] &&\n        this.fields[f].props.validate &&\n        isFunction(this.fields[f].props.validate)\n    );\n\n    // Construct an array with all of the field validation functions\n    const fieldValidations: Promise<string>[] =\n      fieldKeysWithValidation.length > 0\n        ? fieldKeysWithValidation.map(f =>\n            this.runSingleFieldLevelValidation(f, getIn(values, f))\n          )\n        : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n    return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n      fieldErrorsList.reduce(\n        (prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (!!curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        },\n        {} as FormikErrors<Values>\n      )\n    );\n  }\n\n  runValidateHandler(values: FormikValues): Promise<FormikErrors<Values>> {\n    return new Promise(resolve => {\n      const maybePromisedErrors = (this.props.validate as any)(values);\n      if (maybePromisedErrors === undefined) {\n        resolve({});\n      } else if (isPromise(maybePromisedErrors)) {\n        (maybePromisedErrors as Promise<any>).then(\n          () => {\n            resolve({});\n          },\n          errors => {\n            resolve(errors);\n          }\n        );\n      } else {\n        resolve(maybePromisedErrors);\n      }\n    });\n  }\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  runValidationSchema = (values: FormikValues) => {\n    return new Promise(resolve => {\n      const { validationSchema } = this.props;\n      const schema = isFunction(validationSchema)\n        ? validationSchema()\n        : validationSchema;\n      validateYupSchema(values, schema).then(\n        () => {\n          resolve({});\n        },\n        (err: any) => {\n          resolve(yupToFormErrors(err));\n        }\n      );\n    });\n  };\n\n  /**\n   * Run all validations methods and update state accordingly\n   */\n  runValidations = (\n    values: FormikValues = this.state.values\n  ): Promise<FormikErrors<Values>> => {\n    if (this.validator) {\n      this.validator();\n    }\n\n    const [promise, cancel] = makeCancelable(\n      Promise.all([\n        this.runFieldLevelValidations(values),\n        this.props.validationSchema ? this.runValidationSchema(values) : {},\n        this.props.validate ? this.runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, handlerErrors]) => {\n        return deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, handlerErrors],\n          { arrayMerge }\n        );\n      })\n    );\n    this.validator = cancel;\n    return promise\n      .then((errors: FormikErrors<Values>) => {\n        if (this.didMount) {\n          this.setState(prevState => {\n            if (!isEqual(prevState.errors, errors)) {\n              return { errors };\n            }\n            return null; // abort the update\n          });\n        }\n        return errors;\n      })\n      .catch(x => x);\n  };\n\n  handleChange = (\n    eventOrPath: string | React.ChangeEvent<any>\n  ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n    // @todo someone make this less disgusting.\n    //\n    // executeChange is the core of handleChange, we'll use it cache change\n    // handlers like Preact's linkState.\n    const executeChange = (\n      eventOrTextValue: string | React.ChangeEvent<any>,\n      maybePath?: string\n    ) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as React.ChangeEvent<any>).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n        } = (eventOrTextValue as React.ChangeEvent<any>).target;\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && process.env.NODE_ENV !== 'production') {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) ? checked : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        this.setState(\n          prevState => ({\n            ...prevState,\n            values: setIn(prevState.values, field!, val),\n          }),\n          () => {\n            if (this.props.validateOnChange) {\n              this.runValidations(setIn(this.state.values, field!, val));\n            }\n          }\n        );\n      }\n    };\n\n    // Actually execute logic above....\n    // cache these handlers by key like Preact's linkState does for perf boost\n    if (isString(eventOrPath)) {\n      return isFunction(this.hcCache[eventOrPath])\n        ? this.hcCache[eventOrPath] // return the cached handled\n        : (this.hcCache[eventOrPath] = (\n            // make a new one\n            event: React.ChangeEvent<any> | string\n          ) =>\n            executeChange(\n              event /* string or event, does not matter */,\n              eventOrPath /* this is path to the field now */\n            ));\n    } else {\n      executeChange(eventOrPath);\n    }\n  };\n\n  setFieldValue = (\n    field: string,\n    value: any,\n    shouldValidate: boolean = true\n  ) => {\n    if (this.didMount) {\n      // Set form field by name\n      this.setState(\n        prevState => ({\n          ...prevState,\n          values: setIn(prevState.values, field, value),\n        }),\n        () => {\n          if (this.props.validateOnChange && shouldValidate) {\n            this.runValidations(this.state.values);\n          }\n        }\n      );\n    }\n  };\n\n  handleSubmit = (e: React.FormEvent<HTMLFormElement> | undefined) => {\n    if (e && e.preventDefault) {\n      e.preventDefault();\n    }\n\n    // Warn if form submission is triggered by a <button> without a\n    // specified `type` attribute during development. This mitigates\n    // a common gotcha in forms with both reset and submit buttons,\n    // where the dev forgets to add type=\"button\" to the reset button.\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof document !== 'undefined'\n    ) {\n      // Safely get the active element (works with IE)\n      const activeElement = getActiveElement();\n      if (\n        activeElement !== null &&\n        activeElement instanceof HTMLButtonElement\n      ) {\n        warning(\n          !!(\n            activeElement.attributes &&\n            activeElement.attributes.getNamedItem('type')\n          ),\n          'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n        );\n      }\n    }\n\n    this.submitForm();\n  };\n\n  submitForm = () => {\n    // Recursively set all values to `true`.\n    this.setState(prevState => ({\n      touched: setNestedObjectValues<FormikTouched<Values>>(\n        prevState.values,\n        true\n      ),\n      isSubmitting: true,\n      isValidating: true,\n      submitCount: prevState.submitCount + 1,\n    }));\n\n    return this.runValidations(this.state.values).then(combinedErrors => {\n      if (this.didMount) {\n        this.setState({ isValidating: false });\n      }\n      const isValid = Object.keys(combinedErrors).length === 0;\n      if (isValid) {\n        this.executeSubmit();\n      } else if (this.didMount) {\n        // ^^^ Make sure Formik is still mounted before calling setState\n        this.setState({ isSubmitting: false });\n      }\n    });\n  };\n\n  executeSubmit = () => {\n    this.props.onSubmit(this.state.values, this.getFormikActions());\n  };\n\n  handleBlur = (eventOrString: any): void | ((e: any) => void) => {\n    const executeBlur = (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && process.env.NODE_ENV !== 'production') {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      this.setState(prevState => ({\n        touched: setIn(prevState.touched, field, true),\n      }));\n\n      if (this.props.validateOnBlur) {\n        this.runValidations(this.state.values);\n      }\n    };\n\n    if (isString(eventOrString)) {\n      // cache these handlers by key like Preact's linkState does for perf boost\n      return isFunction(this.hbCache[eventOrString])\n        ? this.hbCache[eventOrString]\n        : (this.hbCache[eventOrString] = (event: any) =>\n            executeBlur(event, eventOrString));\n    } else {\n      executeBlur(eventOrString);\n    }\n  };\n\n  setFieldTouched = (\n    field: string,\n    touched: boolean = true,\n    shouldValidate: boolean = true\n  ) => {\n    // Set touched field by name\n    this.setState(\n      prevState => ({\n        ...prevState,\n        touched: setIn(prevState.touched, field, touched),\n      }),\n      () => {\n        if (this.props.validateOnBlur && shouldValidate) {\n          this.runValidations(this.state.values);\n        }\n      }\n    );\n  };\n\n  setFieldError = (field: string, message: string | undefined) => {\n    // Set form field by name\n    this.setState(prevState => ({\n      ...prevState,\n      errors: setIn(prevState.errors, field, message),\n    }));\n  };\n\n  resetForm = (nextValues?: Values) => {\n    const values = nextValues ? nextValues : this.props.initialValues;\n\n    this.initialValues = values;\n\n    this.setState({\n      isSubmitting: false,\n      isValidating: false,\n      errors: {},\n      touched: {},\n      error: undefined,\n      status: this.props.initialStatus,\n      values,\n      submitCount: 0,\n    });\n  };\n\n  handleReset = () => {\n    if (this.props.onReset) {\n      const maybePromisedOnReset = (this.props.onReset as any)(\n        this.state.values,\n        this.getFormikActions()\n      );\n\n      if (isPromise(maybePromisedOnReset)) {\n        (maybePromisedOnReset as Promise<any>).then(this.resetForm);\n      } else {\n        this.resetForm();\n      }\n    } else {\n      this.resetForm();\n    }\n  };\n\n  setFormikState = (s: any, callback?: (() => void)) =>\n    this.setState(s, callback);\n\n  validateForm = (values: Values) => {\n    this.setState({ isValidating: true });\n    return this.runValidations(values).then(errors => {\n      if (this.didMount) {\n        this.setState({ isValidating: false });\n      }\n      return errors;\n    });\n  };\n\n  getFormikActions = (): FormikActions<Values> => {\n    return {\n      resetForm: this.resetForm,\n      submitForm: this.submitForm,\n      validateForm: this.validateForm,\n      validateField: this.validateField,\n      setError: this.setError,\n      setErrors: this.setErrors,\n      setFieldError: this.setFieldError,\n      setFieldTouched: this.setFieldTouched,\n      setFieldValue: this.setFieldValue,\n      setStatus: this.setStatus,\n      setSubmitting: this.setSubmitting,\n      setTouched: this.setTouched,\n      setValues: this.setValues,\n      setFormikState: this.setFormikState,\n    };\n  };\n\n  getFormikComputedProps = () => {\n    const { isInitialValid } = this.props;\n    const dirty = !isEqual(this.initialValues, this.state.values);\n    return {\n      dirty,\n      isValid: dirty\n        ? this.state.errors && Object.keys(this.state.errors).length === 0\n        : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: this['props']) => boolean)(this.props)\n          : (isInitialValid as boolean),\n      initialValues: this.initialValues,\n    };\n  };\n\n  getFormikBag = () => {\n    return {\n      ...this.state,\n      ...this.getFormikActions(),\n      ...this.getFormikComputedProps(),\n      // Field needs to communicate with Formik during resets\n      registerField: this.registerField,\n      unregisterField: this.unregisterField,\n      handleBlur: this.handleBlur,\n      handleChange: this.handleChange,\n      handleReset: this.handleReset,\n      handleSubmit: this.handleSubmit,\n      validateOnChange: this.props.validateOnChange,\n      validateOnBlur: this.props.validateOnBlur,\n    };\n  };\n\n  getFormikContext = (): FormikContext<any> => {\n    return {\n      ...this.getFormikBag(),\n      validationSchema: this.props.validationSchema,\n      validate: this.props.validate,\n      initialValues: this.initialValues,\n    };\n  };\n\n  render() {\n    const { component, render, children } = this.props;\n    const props = this.getFormikBag();\n    const ctx = this.getFormikContext();\n    return (\n      <FormikProvider value={ctx}>\n        {component\n          ? React.createElement(component as any, props)\n          : render\n            ? render(props)\n            : children // children come last, always called\n              ? isFunction(children)\n                ? (children as ((\n                    props: FormikProps<Values>\n                  ) => React.ReactNode))(props as FormikProps<Values>)\n                : !isEmptyChildren(children)\n                  ? React.Children.only(children)\n                  : null\n              : null}\n      </FormikProvider>\n    );\n  }\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n\n    ${htmlContent}\n\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: any = {} as FormikErrors<Values>;\n  if (yupError.inner.length === 0) {\n    return setIn(errors, yupError.path, yupError.message);\n  }\n  for (let err of yupError.inner) {\n    if (!errors[err.path]) {\n      errors = setIn(errors, err.path, err.message);\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  let validateData: Partial<T> = {};\n  for (let k in values) {\n    if (values.hasOwnProperty(k)) {\n      const key = String(k);\n      validateData[key] = values[key] !== '' ? values[key] : undefined;\n    }\n  }\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n","import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContext,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport { getIn, isEmptyChildren, isFunction, setIn } from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = [...(array || [])];\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (array: any[], indexA: number, indexB: number) => {\n  const copy = [...(array || [])];\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy[index] = value;\n  return copy;\n};\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContext<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContext<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n      validateOnChange,\n      formik: { setFormikState, validateForm },\n    } = this.props;\n    setFormikState(\n      (prevState: FormikState<any>) => {\n        let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n        let updateTouched =\n          typeof alterTouched === 'function' ? alterTouched : fn;\n\n        return {\n          ...prevState,\n          values: setIn(\n            prevState.values,\n            name,\n            fn(getIn(prevState.values, name))\n          ),\n          errors: alterErrors\n            ? setIn(\n                prevState.errors,\n                name,\n                updateErrors(getIn(prevState.errors, name))\n              )\n            : prevState.errors,\n          touched: alterTouched\n            ? setIn(\n                prevState.touched,\n                name,\n                updateTouched(getIn(prevState.touched, name))\n              )\n            : prevState.touched,\n        };\n      },\n      () => {\n        if (validateOnChange) {\n          validateForm();\n        }\n      }\n    );\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (array: any[]) => [...(array || []), cloneDeep(value)],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? [...array] : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n        ? (render as any)(props)\n        : children // children come last, always called\n          ? typeof children === 'function'\n            ? (children as any)(props)\n            : !isEmptyChildren(children) ? React.Children.only(children) : null\n          : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\nimport { FormikContext } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: ((errorMessage: string) => React.ReactNode);\n  render?: ((errorMessage: string) => React.ReactNode);\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContext<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContext<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render) ? render(error) : null\n        : children\n          ? isFunction(children) ? children(error) : null\n          : component\n            ? React.createElement(component, rest as any, error)\n            : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContext<any> }\n>(ErrorMessageImpl);\n"],"names":[],"mappings":"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"}