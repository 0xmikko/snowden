{"ast":null,"code":"import _objectSpread from \"/Users/mikhail/Coding/snowden/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { updateState } from \"../utils/updateState\";\nimport * as actions from '../actions/actions';\nimport * as status from '../config';\nvar initialState = {\n  lists: {},\n  updates: {}\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var obj = {};\n  var hash, hashUpdate;\n\n  switch (action.type) {\n    case actions.TYPEAHEAD_LIST_REQUEST:\n      obj[action.meta.resource] = {\n        status: status.STATUS_LOADING,\n        data: []\n      };\n      return updateState(state, _objectSpread({}, state, {\n        lists: _objectSpread({}, obj)\n      }));\n\n    case actions.TYPEAHEAD_LIST_SUCCESS:\n      var data = action.payload.results !== undefined ? action.payload.results : action.payload;\n      var dataById = []; //data.map(item => dataById[item.id] = item)\n\n      obj[action.meta.resource] = {\n        status: status.STATUS_SUCCESS,\n        data: data\n      };\n      console.log(\"FFFF2\", obj);\n      return updateState(state, _objectSpread({}, state, {\n        lists: _objectSpread({}, obj)\n      }));\n\n    case actions.TYPEAHEAD_LIST_FAILURE:\n      obj[action.meta.resource] = {\n        status: status.STATUS_FAILURE,\n        data: []\n      };\n      return updateState(state, _objectSpread({}, state, {\n        lists: _objectSpread({}, obj)\n      }));\n\n    default:\n      return state;\n  }\n});\nexport var getOptionsList = function getOptionsList(state) {\n  return state.lists;\n};","map":{"version":3,"sources":["/Users/mikhail/Coding/snowden/front/src/reducers/typeAhead.js"],"names":["updateState","actions","status","initialState","lists","updates","state","action","obj","hash","hashUpdate","type","TYPEAHEAD_LIST_REQUEST","meta","resource","STATUS_LOADING","data","TYPEAHEAD_LIST_SUCCESS","payload","results","undefined","dataById","STATUS_SUCCESS","console","log","TYPEAHEAD_LIST_FAILURE","STATUS_FAILURE","getOptionsList"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,OAAO,KAAKC,OAAZ,MAAyB,oBAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;AAGA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAArB;AAMA,gBAAe,YAAgC;AAAA,MAA/BC,KAA+B,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;AAE7C,MAAMC,GAAG,GAAG,EAAZ;AACA,MAAIC,IAAJ,EAAUC,UAAV;;AAEA,UAAQH,MAAM,CAACI,IAAf;AAEI,SAAKV,OAAO,CAACW,sBAAb;AACGJ,MAAAA,GAAG,CAACD,MAAM,CAACM,IAAP,CAAYC,QAAb,CAAH,GAA4B;AACxBZ,QAAAA,MAAM,EAAEA,MAAM,CAACa,cADS;AAExBC,QAAAA,IAAI,EAAE;AAFkB,OAA5B;AAKD,aAAOhB,WAAW,CAACM,KAAD,oBAAaA,KAAb;AAAoBF,QAAAA,KAAK,oBAAMI,GAAN;AAAzB,SAAlB;;AAEF,SAAKP,OAAO,CAACgB,sBAAb;AAEI,UAAID,IAAI,GAAIT,MAAM,CAACW,OAAP,CAAeC,OAAf,KAA2BC,SAA5B,GAAyCb,MAAM,CAACW,OAAP,CAAeC,OAAxD,GAAkEZ,MAAM,CAACW,OAApF;AAEA,UAAMG,QAAQ,GAAG,EAAjB,CAJJ,CAKI;;AAEAb,MAAAA,GAAG,CAACD,MAAM,CAACM,IAAP,CAAYC,QAAb,CAAH,GAA4B;AACpBZ,QAAAA,MAAM,EAAEA,MAAM,CAACoB,cADK;AAEpBN,QAAAA,IAAI,EAAEA;AAFc,OAA5B;AAIAO,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBhB,GAArB;AACA,aAAOR,WAAW,CAACM,KAAD,oBAAaA,KAAb;AAAoBF,QAAAA,KAAK,oBAAMI,GAAN;AAAzB,SAAlB;;AAEN,SAAKP,OAAO,CAACwB,sBAAb;AACMjB,MAAAA,GAAG,CAACD,MAAM,CAACM,IAAP,CAAYC,QAAb,CAAH,GAA4B;AACxBZ,QAAAA,MAAM,EAAEA,MAAM,CAACwB,cADS;AAExBV,QAAAA,IAAI,EAAE;AAFkB,OAA5B;AAIA,aAAOhB,WAAW,CAACM,KAAD,oBAAaA,KAAb;AAAmBF,QAAAA,KAAK,oBAAMI,GAAN;AAAxB,SAAlB;;AAEJ;AACI,aAAOF,KAAP;AAhCR;AAmCD,CAxCD;AA0CA,OAAO,IAAMqB,cAAc,GAAM,SAApBA,cAAoB,CAACrB,KAAD;AAAA,SAAYA,KAAK,CAACF,KAAlB;AAAA,CAA1B","sourcesContent":["import { updateState } from \"../utils/updateState\";\nimport * as actions from '../actions/actions';\nimport * as status from '../config';\n\n\nconst initialState = {\n  lists: {},\n  updates: {}\n};\n\n\nexport default (state=initialState, action) => {\n\n  const obj = {};\n  let hash, hashUpdate;\n\n  switch (action.type) {\n\n      case actions.TYPEAHEAD_LIST_REQUEST:\n         obj[action.meta.resource] = {\n             status: status.STATUS_LOADING,\n             data: []\n         }\n\n        return updateState(state, { ...state, lists: {...obj} });\n\n      case actions.TYPEAHEAD_LIST_SUCCESS:\n\n          let data = (action.payload.results !== undefined) ? action.payload.results : action.payload;\n\n          const dataById = []\n          //data.map(item => dataById[item.id] = item)\n\n          obj[action.meta.resource] = {\n                  status: status.STATUS_SUCCESS,\n                  data: data,\n              }\n          console.log(\"FFFF2\", obj)\n          return updateState(state, { ...state, lists: {...obj} });\n\n    case actions.TYPEAHEAD_LIST_FAILURE:\n          obj[action.meta.resource] = {\n              status: status.STATUS_FAILURE,\n              data: []\n          }\n          return updateState(state, { ...state,lists: {...obj} });\n\n      default:\n          return state;\n\n  }\n}\n\nexport const getOptionsList    = (state) => (state.lists);"]},"metadata":{},"sourceType":"module"}