{"ast":null,"code":"import { BACKEND_ADDR } from \"../config\";\nexport var getFullAPIAddress = function getFullAPIAddress(url, params) {\n  // Decode URI if it was in %% format, it's important\n  // when we receive next_url in pagination\n  url = decodeURI(url);\n  url = url.startsWith(\"http://\") ? url : BACKEND_ADDR + url;\n  var pos = 0;\n\n  for (var key in params) {\n    var value = params[key];\n\n    if (value) {\n      url += (pos === 0 ? \"?\" : \"&\") + key + \"=\" + value;\n      console.log(\"URL:4\", key, url);\n      pos++;\n    }\n  }\n\n  return url;\n};\nexport var getApiById = function getApiById(api, id, params) {\n  if (api.includes(\":id\")) api = api.replace(\":id\", id.toString());else api += id;\n  api += !api.endsWith(\"/\") ? \"/\" : \"\";\n  return getFullAPIAddress(api, params);\n};","map":{"version":3,"sources":["/Users/mikhail/Coding/snowden/front/src/utils/api.js"],"names":["BACKEND_ADDR","getFullAPIAddress","url","params","decodeURI","startsWith","pos","key","value","console","log","getApiById","api","id","includes","replace","toString","endsWith"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,WAA3B;AAGA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,GAAD,EAAMC,MAAN,EAAiB;AAC9C;AACA;AACAD,EAAAA,GAAG,GAAGE,SAAS,CAACF,GAAD,CAAf;AACAA,EAAAA,GAAG,GAAGA,GAAG,CAACG,UAAJ,CAAe,SAAf,IAA4BH,GAA5B,GAAkCF,YAAY,GAAGE,GAAvD;AACA,MAAII,GAAG,GAAG,CAAV;;AACA,OAAI,IAAIC,GAAR,IAAeJ,MAAf,EAAuB;AACnB,QAAIK,KAAK,GAAGL,MAAM,CAACI,GAAD,CAAlB;;AACA,QAAIC,KAAJ,EAAW;AACPN,MAAAA,GAAG,IAAI,CAAEI,GAAG,KAAK,CAAT,GAAc,GAAd,GAAoB,GAArB,IAA4BC,GAA5B,GAAkC,GAAlC,GAAwCC,KAA/C;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,GAArB,EAA0BL,GAA1B;AACAI,MAAAA,GAAG;AACN;AAEJ;;AACD,SAAOJ,GAAP;AACH,CAhBM;AAoBP,OAAO,IAAMS,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAMC,EAAN,EAAUV,MAAV,EAAqB;AAE3C,MAAIS,GAAG,CAACE,QAAJ,CAAa,KAAb,CAAJ,EAAyBF,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAY,KAAZ,EAAmBF,EAAE,CAACG,QAAH,EAAnB,CAAN,CAAzB,KAAuEJ,GAAG,IAAIC,EAAP;AAEvED,EAAAA,GAAG,IAAK,CAACA,GAAG,CAACK,QAAJ,CAAa,GAAb,CAAF,GAAuB,GAAvB,GAA4B,EAAnC;AACA,SAAOhB,iBAAiB,CAACW,GAAD,EAAMT,MAAN,CAAxB;AACH,CANM","sourcesContent":["import {BACKEND_ADDR} from \"../config\";\n\n\nexport const getFullAPIAddress = (url, params) => {\n    // Decode URI if it was in %% format, it's important\n    // when we receive next_url in pagination\n    url = decodeURI(url);\n    url = url.startsWith(\"http://\") ? url : BACKEND_ADDR + url;\n    let pos = 0;\n    for(let key in params) {\n        let value = params[key];\n        if (value) {\n            url += ((pos === 0) ? \"?\" : \"&\") + key + \"=\" + value;\n            console.log(\"URL:4\", key, url)\n            pos++;\n        }\n\n    }\n    return url\n};\n\n\n\nexport const getApiById = (api, id, params) => {\n\n    if (api.includes(\":id\")) api = api.replace(\":id\", id.toString()); else api += id;\n\n    api += (!api.endsWith(\"/\")) ? \"/\": \"\";\n    return getFullAPIAddress(api, params);\n};"]},"metadata":{},"sourceType":"module"}