{"ast":null,"code":"import _objectSpread from \"/Users/mikhail/Coding/snowden/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { updateState } from \"../utils/updateState\";\nimport * as actions from '../actions/actions';\nimport * as status from '../config';\nvar initialState = {\n  lists: {},\n  details: {},\n  updates: {},\n  search: {}\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var obj = {};\n  var hash, hashUpdate;\n\n  switch (action.type) {\n    case actions.DATA_LOADER_LIST_REQUEST:\n      obj[action.meta.resource] = {\n        status: status.STATUS_LOADING,\n        data: []\n      };\n      return updateState(state, _objectSpread({}, state, {\n        lists: updateState(state.lists, obj)\n      }));\n\n    case actions.DATA_LOADER_LIST_UPDATE_REQUEST:\n      obj[action.meta.resource] = _objectSpread({}, state.lists[action.meta.resource], {\n        status: status.STATUS_UPDATING\n      });\n      return updateState(state, _objectSpread({}, state, {\n        lists: _objectSpread({}, obj)\n      }));\n\n    case actions.DATA_LOADER_LIST_SUCCESS:\n      var data = action.payload.results !== undefined ? action.payload.results : action.payload;\n      var dataById = [];\n      data.map(function (item) {\n        return dataById[item.id] = item;\n      });\n      var prevQuery = state.lists[action.meta.resource].query;\n      var newQuery = action.meta.query;\n      console.log(\"QQQ1\", action.meta);\n      console.log(\"QQQ1\", prevQuery);\n      console.log(\"QQQ2\", newQuery);\n      var updateData = newQuery === prevQuery ? state.lists[action.meta.resource].data : undefined;\n      obj[action.meta.resource] = {\n        status: status.STATUS_SUCCESS,\n        data: _objectSpread({}, updateData, dataById),\n        count: action.payload.count,\n        previous: action.payload.previous,\n        next: action.payload.next,\n        query: newQuery\n      };\n      return updateState(state, _objectSpread({}, state, {\n        lists: updateState(state.lists, obj)\n      }));\n\n    case actions.DATA_LOADER_LIST_FAILURE:\n      obj[action.meta.resource] = {\n        status: status.STATUS_FAILURE,\n        data: []\n      };\n      return updateState(state, _objectSpread({}, state, {\n        lists: updateState(state.lists, obj)\n      }));\n\n    /*\n                                 DETAIL REQUESTS\n        =====================================================================\n    */\n\n    case actions.DATA_LOADER_DETAIL_REQUEST:\n      obj[action.meta.resource] = state.details[action.meta.resource] || {};\n      obj[action.meta.resource][action.meta.id] = {\n        status: status.STATUS_LOADING\n      };\n      return updateState(state, _objectSpread({}, state, {\n        details: updateState(state.details, obj)\n      }));\n\n    case actions.DATA_LOADER_DETAIL_SUCCESS:\n      console.log(\"DETAILS\", state.details); // We add an info of update for current hash\n\n      hash = action.meta.hash || 0;\n      hashUpdate = {};\n      hashUpdate[hash] = +Date.now();\n      obj[action.meta.resource] = state.details[action.meta.resource] || {};\n      obj[action.meta.resource][action.meta.id] = {\n        status: status.STATUS_SUCCESS,\n        data: action.payload\n      };\n      return updateState(state, _objectSpread({}, state, {\n        details: updateState(state.details, obj),\n        updates: updateState(state.updates, hashUpdate)\n      }));\n\n    case actions.DATA_LOADER_DETAIL_FAILURE:\n      obj[action.meta.resource] = {};\n      obj[action.meta.resource][action.meta.id] = {\n        status: status.STATUS_FAILURE,\n        data: []\n      };\n      return updateState(state, _objectSpread({}, state, {\n        details: _objectSpread({}, obj)\n      }));\n    // DELETE OPERATIONS\n\n    case actions.DATA_LOADER_DELETE_SUCCESS:\n      hash = action.meta.hash || 0;\n      hashUpdate = {};\n      hashUpdate[hash] = +Date.now(); // Remove resource + id from list\n\n      obj[action.meta.resource] = state.lists[action.meta.resource];\n      console.log(\"DELETE\", action.meta.resource);\n      console.log(\"DELETE\", obj);\n\n      if (obj[action.meta.resource]) {\n        data = obj[action.meta.resource].data;\n        if (data[action.meta.id]) delete data[action.meta.id];\n      }\n\n      console.log(\"DELETE\", obj);\n      return updateState(state, _objectSpread({}, state, {\n        lists: updateState(state.lists, obj),\n        updates: updateState(state.updates, hashUpdate)\n      }));\n\n    case actions.SEARCH_COMPONENT:\n      if (!action.resource) throw \"No resource for search were sent\";\n      var searchUpdate = {};\n      searchUpdate[action.resource] = action.query;\n      return updateState(state, _objectSpread({}, state, {\n        search: updateState(state.updates, searchUpdate)\n      }));\n\n    default:\n      return state;\n  }\n});\nexport var getDataList = function getDataList(state) {\n  return state.lists;\n};\nexport var getDataDetails = function getDataDetails(state) {\n  return state.details;\n};\nexport var getHashUpdates = function getHashUpdates(state) {\n  return state.updates;\n};\nexport var getComponentSearch = function getComponentSearch(state) {\n  return state.search;\n};","map":{"version":3,"sources":["/Users/mikhail/Coding/snowden/front/src/reducers/dataLoader.js"],"names":["updateState","actions","status","initialState","lists","details","updates","search","state","action","obj","hash","hashUpdate","type","DATA_LOADER_LIST_REQUEST","meta","resource","STATUS_LOADING","data","DATA_LOADER_LIST_UPDATE_REQUEST","STATUS_UPDATING","DATA_LOADER_LIST_SUCCESS","payload","results","undefined","dataById","map","item","id","prevQuery","query","newQuery","console","log","updateData","STATUS_SUCCESS","count","previous","next","DATA_LOADER_LIST_FAILURE","STATUS_FAILURE","DATA_LOADER_DETAIL_REQUEST","DATA_LOADER_DETAIL_SUCCESS","Date","now","DATA_LOADER_DETAIL_FAILURE","DATA_LOADER_DELETE_SUCCESS","SEARCH_COMPONENT","searchUpdate","getDataList","getDataDetails","getHashUpdates","getComponentSearch"],"mappings":"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","sourcesContent":["import { updateState } from \"../utils/updateState\";\nimport * as actions from '../actions/actions';\nimport * as status from '../config';\n\n\nconst initialState = {\n  lists: {},\n  details: {},\n  updates: {},\n  search: {}\n};\n\n\nexport default (state=initialState, action) => {\n\n  const obj = {};\n  let hash, hashUpdate;\n\n  switch (action.type) {\n\n      case actions.DATA_LOADER_LIST_REQUEST:\n         obj[action.meta.resource] = {\n             status: status.STATUS_LOADING,\n             data: []\n         }\n\n        return updateState(state, { ...state,\n                        lists: updateState(state.lists, obj) });\n\n      case actions.DATA_LOADER_LIST_UPDATE_REQUEST:\n         obj[action.meta.resource] = {\n             ...state.lists[action.meta.resource],\n             status: status.STATUS_UPDATING,\n         }\n\n        return updateState(state, { ...state, lists: {...obj} });\n\n      case actions.DATA_LOADER_LIST_SUCCESS:\n\n          let data = (action.payload.results !== undefined) ? action.payload.results : action.payload;\n\n          const dataById = []\n          data.map(item => dataById[item.id] = item)\n\n          const prevQuery = state.lists[action.meta.resource].query;\n          const newQuery = action.meta.query;\n          console.log(\"QQQ1\",  action.meta);\n          console.log(\"QQQ1\", prevQuery);\n          console.log(\"QQQ2\", newQuery);\n\n          let updateData = (newQuery === prevQuery)? state.lists[action.meta.resource].data : undefined;\n\n          obj[action.meta.resource] = {\n                  status: status.STATUS_SUCCESS,\n                  data: {\n                    ...updateData,\n                    ...dataById\n                  },\n                  count: action.payload.count,\n                  previous: action.payload.previous,\n                  next: action.payload.next,\n                  query: newQuery\n              }\n\n          return updateState(state, { ...state,\n              lists: updateState(state.lists, obj) });\n\n    case actions.DATA_LOADER_LIST_FAILURE:\n          obj[action.meta.resource] = {\n              status: status.STATUS_FAILURE,\n              data: []\n          }\n          return updateState(state, { ...state,\n              lists: updateState(state.lists, obj) });\n\n\n    /*\n                                 DETAIL REQUESTS\n        =====================================================================\n    */\n\n\n    case actions.DATA_LOADER_DETAIL_REQUEST:\n\n          obj[action.meta.resource] = state.details[action.meta.resource] || {};\n          obj[action.meta.resource][action.meta.id] = {\n              status: status.STATUS_LOADING,\n          }\n\n        return updateState(state, { ...state,\n                            details: updateState(state.details, obj)});\n\n    case actions.DATA_LOADER_DETAIL_SUCCESS:\n\n          console.log(\"DETAILS\", state.details)\n          // We add an info of update for current hash\n          hash = action.meta.hash || 0;\n          hashUpdate = {};\n          hashUpdate[hash] = +Date.now();\n\n          obj[action.meta.resource] = state.details[action.meta.resource] || {};\n          obj[action.meta.resource][action.meta.id] = {\n              status: status.STATUS_SUCCESS,\n              data: action.payload,\n          }\n          return updateState(state,\n                { ...state,\n                            details: updateState(state.details, obj),\n                            updates: updateState(state.updates, hashUpdate)});\n\n    case actions.DATA_LOADER_DETAIL_FAILURE:\n          obj[action.meta.resource] = {};\n          obj[action.meta.resource][action.meta.id] = {\n              status: status.STATUS_FAILURE,\n              data: []\n          }\n          return updateState(state, { ...state, details: {...obj} });\n\n\n    // DELETE OPERATIONS\n\n    case actions.DATA_LOADER_DELETE_SUCCESS:\n        hash = action.meta.hash || 0;\n        hashUpdate = {};\n        hashUpdate[hash] = +Date.now();\n\n        // Remove resource + id from list\n        obj[action.meta.resource] = state.lists[action.meta.resource];\n        console.log(\"DELETE\", action.meta.resource)\n        console.log(\"DELETE\", obj)\n        if (obj[action.meta.resource]) {\n            data = obj[action.meta.resource].data\n            if (data[action.meta.id]) delete data[action.meta.id]\n        }\n\n        console.log(\"DELETE\", obj)\n\n        return updateState(state,\n            { ...state,\n                        lists: updateState(state.lists, obj),\n                        updates: updateState(state.updates, hashUpdate)});\n\n    case actions.SEARCH_COMPONENT:\n        if (!action.resource) throw \"No resource for search were sent\";\n        const searchUpdate = {};\n        searchUpdate[action.resource] = action.query;\n\n        return updateState(state,\n            { ...state,\n                        search: updateState(state.updates, searchUpdate)});\n\n\n    default:\n          return state;\n\n  }\n}\n\nexport const getDataList    = (state) => (state.lists);\nexport const getDataDetails = (state) => (state.details);\nexport const getHashUpdates = (state) => (state.updates);\nexport const getComponentSearch = (state) => (state.search);\n"]},"metadata":{},"sourceType":"module"}