{"ast":null,"code":"import { isRSAA, apiMiddleware } from 'redux-api-middleware';\nimport { TOKEN_RECEIVED } from \"./actions/actions\";\nimport { refreshAccessToken } from './actions/auth';\nimport { refreshToken, isAccessTokenExpired } from './reducers';\nexport function createApiMiddleware() {\n  var postponedRSAAs = [];\n  return function (_ref) {\n    var dispatch = _ref.dispatch,\n        getState = _ref.getState;\n    var rsaaMiddleware = apiMiddleware({\n      dispatch: dispatch,\n      getState: getState\n    });\n    return function (next) {\n      return function (action) {\n        var nextCheckPostoned = function nextCheckPostoned(nextAction) {\n          // Run postponed actions after token refresh\n          if (nextAction.type === TOKEN_RECEIVED) {\n            next(nextAction);\n            postponedRSAAs.forEach(function (postponed) {\n              rsaaMiddleware(next)(postponed);\n            });\n            postponedRSAAs = [];\n          } else {\n            next(nextAction);\n          }\n        };\n\n        if (isRSAA(action)) {\n          var state = getState(),\n              token = refreshToken(state);\n\n          if (token && isAccessTokenExpired(state)) {\n            postponedRSAAs.push(action);\n\n            if (postponedRSAAs.length === 1) {\n              return rsaaMiddleware(nextCheckPostoned)(refreshAccessToken(token));\n            } else {\n              return;\n            }\n          }\n\n          return rsaaMiddleware(next)(action);\n        }\n\n        return next(action);\n      };\n    };\n  };\n}\nexport default createApiMiddleware();","map":{"version":3,"sources":["/Users/mikhail/Coding/snowden/front/src/middleware.js"],"names":["isRSAA","apiMiddleware","TOKEN_RECEIVED","refreshAccessToken","refreshToken","isAccessTokenExpired","createApiMiddleware","postponedRSAAs","dispatch","getState","rsaaMiddleware","next","action","nextCheckPostoned","nextAction","type","forEach","postponed","state","token","push","length"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,aAAjB,QAAsC,sBAAtC;AAEA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,YAAnD;AAGA,OAAO,SAASC,mBAAT,GAA+B;AACpC,MAAIC,cAAc,GAAG,EAArB;AAEA,SAAO,gBAA4B;AAAA,QAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,QAAfC,QAAe,QAAfA,QAAe;AACjC,QAAMC,cAAc,GAAGT,aAAa,CAAC;AAACO,MAAAA,QAAQ,EAARA,QAAD;AAAWC,MAAAA,QAAQ,EAARA;AAAX,KAAD,CAApC;AAEA,WAAO,UAACE,IAAD;AAAA,aAAU,UAACC,MAAD,EAAY;AAC3B,YAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,UAAD,EAAgB;AACtC;AACA,cAAIA,UAAU,CAACC,IAAX,KAAoBb,cAAxB,EAAwC;AACtCS,YAAAA,IAAI,CAACG,UAAD,CAAJ;AACAP,YAAAA,cAAc,CAACS,OAAf,CAAuB,UAACC,SAAD,EAAe;AACpCP,cAAAA,cAAc,CAACC,IAAD,CAAd,CAAqBM,SAArB;AACD,aAFD;AAGAV,YAAAA,cAAc,GAAG,EAAjB;AACD,WAND,MAMO;AACLI,YAAAA,IAAI,CAACG,UAAD,CAAJ;AACD;AACJ,SAXD;;AAaA,YAAGd,MAAM,CAACY,MAAD,CAAT,EAAmB;AACjB,cAAMM,KAAK,GAAGT,QAAQ,EAAtB;AAAA,cACMU,KAAK,GAAGf,YAAY,CAACc,KAAD,CAD1B;;AAGA,cAAGC,KAAK,IAAId,oBAAoB,CAACa,KAAD,CAAhC,EAAyC;AACvCX,YAAAA,cAAc,CAACa,IAAf,CAAoBR,MAApB;;AACA,gBAAGL,cAAc,CAACc,MAAf,KAA0B,CAA7B,EAAgC;AAC9B,qBAAQX,cAAc,CAACG,iBAAD,CAAd,CAAkCV,kBAAkB,CAACgB,KAAD,CAApD,CAAR;AACD,aAFD,MAEO;AACL;AACD;AACF;;AAED,iBAAOT,cAAc,CAACC,IAAD,CAAd,CAAqBC,MAArB,CAAP;AACD;;AACD,eAAOD,IAAI,CAACC,MAAD,CAAX;AACD,OA9BM;AAAA,KAAP;AA+BD,GAlCD;AAmCD;AAED,eAAeN,mBAAmB,EAAlC","sourcesContent":["import { isRSAA, apiMiddleware } from 'redux-api-middleware';\n\nimport { TOKEN_RECEIVED } from \"./actions/actions\";\nimport { refreshAccessToken } from './actions/auth'\nimport { refreshToken, isAccessTokenExpired } from './reducers'\n\n\nexport function createApiMiddleware() {\n  let postponedRSAAs = []\n\n  return ({ dispatch, getState }) => {\n    const rsaaMiddleware = apiMiddleware({dispatch, getState})\n\n    return (next) => (action) => {\n      const nextCheckPostoned = (nextAction) => {\n          // Run postponed actions after token refresh\n          if (nextAction.type === TOKEN_RECEIVED) {\n            next(nextAction);\n            postponedRSAAs.forEach((postponed) => {\n              rsaaMiddleware(next)(postponed)\n            })\n            postponedRSAAs = []\n          } else {\n            next(nextAction)\n          }\n      }\n\n      if(isRSAA(action)) {\n        const state = getState(),\n              token = refreshToken(state)\n\n        if(token && isAccessTokenExpired(state)) {\n          postponedRSAAs.push(action)\n          if(postponedRSAAs.length === 1) {\n            return  rsaaMiddleware(nextCheckPostoned)(refreshAccessToken(token))\n          } else {\n            return\n          }\n        }\n\n        return rsaaMiddleware(next)(action);\n      }\n      return next(action);\n    }\n  }\n}\n\nexport default createApiMiddleware();\n"]},"metadata":{},"sourceType":"module"}