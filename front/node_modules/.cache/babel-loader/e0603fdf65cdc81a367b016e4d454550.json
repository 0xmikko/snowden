{"ast":null,"code":"import _objectSpread from \"/Users/mikhail/Coding/snowden/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/mikhail/Coding/snowden/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mikhail/Coding/snowden/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mikhail/Coding/snowden/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mikhail/Coding/snowden/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mikhail/Coding/snowden/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mikhail/Coding/snowden/front/src/components/Forms/FormikForm.js\";\nimport React, { Component } from \"react\";\nimport { Formik, Field } from 'formik/dist/index';\nimport * as yup from 'yup';\nimport { Card, Tab, Nav, Container, Row, Button, Col, ListGroup, Form, InputGroup } from \"react-bootstrap\"; //import {getHashUpdates} from \"../../reducers\";\n//import * as actions from \"../../actions/dataLoader\";\n\nimport { connect } from \"react-redux\";\nimport * as status from \"../../config\";\nimport { Redirect } from \"react-router\"; //import TypeAhead from './TypeAhead'\n\nvar InputField = function InputField(props) {\n  return React.createElement(Form.Group, {\n    as: Col,\n    md: props.sm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, props.title), React.createElement(Form.Control, {\n    as: props.as,\n    type: props.type,\n    name: props.name,\n    value: props.values[props.name],\n    onChange: props.handleChange,\n    isInvalid: !!props.errors[props.name],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, props.errors[props.name]));\n};\n\nvar CheckBoxField = function CheckBoxField(props) {\n  return React.createElement(Form.Group, {\n    as: Col,\n    md: props.sm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"\\xA0\"), React.createElement(Form.Check, Object.assign({\n    label: props.title\n  }, props, {\n    checked: props.values[props.name],\n    onChange: function onChange() {\n      return props.setFieldValue(props.name, !props.values[props.name]);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })));\n};\n/*\nconst SelectTypeAhead = (props) => {\n    return  <Form.Group as={Col} md={props.sm}>\n        <Form.Label>{ props.title }</Form.Label>\n            <TypeAhead resource={props.resource} api={props.api} {...props}/>\n    </Form.Group>\n}\n*/\n\n\nvar FormikForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FormikForm, _Component);\n\n  function FormikForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FormikForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FormikForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      status: status.STATUS_ACTIVE,\n      hashSent: 0\n    };\n\n    _this.onSubmit = function (values) {\n      console.log(\"FFF-FORM\", values);\n      var hashSent = 'ForMIK' + _this.props.resource + _this.props.id + Date();\n\n      _this.setState({\n        status: status.STATUS_LOADING,\n        hashSent: hashSent\n      });\n\n      _this.props.updateDetail(_this.props.api, _this.props.resource, _this.props.id, values, hashSent);\n    };\n\n    return _this;\n  }\n\n  _createClass(FormikForm, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var hash = this.state.hashSent;\n      if (hash === 0) return;\n\n      if (this.props.hashUpdates[hash] !== undefined && this.state.status === status.STATUS_LOADING) {\n        this.setState({\n          status: status.STATUS_SUCCESS,\n          hashSent: 0\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(\"DODLO\", this.props);\n\n      if (this.state.status === status.STATUS_SUCCESS) {\n        if (this.updateData) {\n          this.updateData();\n        } else return React.createElement(Redirect, {\n          to: this.props.onSuccessLink,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        });\n      }\n\n      var schemaPrep = {};\n      Object.entries(this.props.fieldList).map(function (x) {\n        return schemaPrep[x[0]] = x[1].validation;\n      });\n      var schema = yup.object(_objectSpread({}, schemaPrep));\n      return React.createElement(Formik, {\n        validationSchema: schema,\n        onSubmit: this.onSubmit,\n        initialValues: _objectSpread({}, this.props.initialValues),\n        render: function render(props) {\n          var fields = Object.entries(_this2.props.fieldList).map(function (field) {\n            var key = field[0];\n            var value = field[1];\n            var type = field[1].type || \"text\";\n\n            var inputProps = _objectSpread({\n              name: key,\n              type: type,\n              title: value.title,\n              sm: value.sm || 12,\n              key: key\n            }, props, field[1]);\n\n            switch (type) {\n              case 'text':\n              case 'password':\n                return React.createElement(InputField, Object.assign({}, inputProps, {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 117\n                  },\n                  __self: this\n                }));\n\n              case 'select':\n                return React.createElement(InputField, Object.assign({}, inputProps, {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 120\n                  },\n                  __self: this\n                }));\n\n              case 'textarea':\n                return React.createElement(InputField, Object.assign({}, inputProps, {\n                  as: 'textarea',\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 124\n                  },\n                  __self: this\n                }));\n              //case 'autocomplete':\n              //    return <SelectTypeAhead {...inputProps}/>\n\n              case 'checkbox':\n                return React.createElement(CheckBoxField, Object.assign({}, inputProps, {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 130\n                  },\n                  __self: this\n                }));\n            }\n          });\n          return React.createElement(Form, {\n            noValidate: true,\n            onSubmit: props.handleSubmit,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136\n            },\n            __self: this\n          }, React.createElement(Form.Row, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }, fields), React.createElement(Button, {\n            type: \"submit\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return FormikForm;\n}(Component);\n\n;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {//hashUpdates:          getHashUpdates(state),\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {//updateDetail:      (api, resource, id, file, hashSent) => dispatch(actions.updateDataLoaderDetail(api, resource, id, file, hashSent)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormikForm);","map":{"version":3,"sources":["/Users/mikhail/Coding/snowden/front/src/components/Forms/FormikForm.js"],"names":["React","Component","Formik","Field","yup","Card","Tab","Nav","Container","Row","Button","Col","ListGroup","Form","InputGroup","connect","status","Redirect","InputField","props","sm","title","as","type","name","values","handleChange","errors","CheckBoxField","setFieldValue","FormikForm","state","STATUS_ACTIVE","hashSent","onSubmit","console","log","resource","id","Date","setState","STATUS_LOADING","updateDetail","api","prevProps","prevState","snapshot","hash","hashUpdates","undefined","STATUS_SUCCESS","updateData","onSuccessLink","schemaPrep","Object","entries","fieldList","map","x","validation","schema","object","initialValues","fields","field","key","value","inputProps","handleSubmit","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Formik, Field } from 'formik/dist/index';\nimport * as yup from 'yup';\nimport {Card, Tab, Nav, Container, Row, Button, Col, ListGroup, Form, InputGroup} from \"react-bootstrap\";\n//import {getHashUpdates} from \"../../reducers\";\n//import * as actions from \"../../actions/dataLoader\";\nimport {connect} from \"react-redux\";\nimport * as status from \"../../config\";\nimport {Redirect} from \"react-router\";\n//import TypeAhead from './TypeAhead'\n\n\nconst InputField = (props) => (\n    <Form.Group as={Col} md={props.sm}>\n        <Form.Label>{ props.title }</Form.Label>\n            <Form.Control\n                as = { props.as }\n                type = { props.type }\n                name = { props.name }\n                value = {props.values[props.name]}\n                onChange = {props.handleChange}\n                isInvalid = {!!props.errors[props.name]}\n              />\n        <Form.Control.Feedback type=\"invalid\">\n          { props.errors[props.name]}\n        </Form.Control.Feedback>\n    </Form.Group>\n\n)\n\nconst CheckBoxField = (props) => {\n    return <Form.Group as={Col} md={props.sm}>\n        <Form.Label>&nbsp;</Form.Label>\n        <Form.Check\n            label={props.title}\n            {...props}\n            checked={props.values[props.name]}\n            onChange={() => props.setFieldValue(props.name, !props.values[props.name])}\n        />\n    </Form.Group>\n};\n\n/*\nconst SelectTypeAhead = (props) => {\n    return  <Form.Group as={Col} md={props.sm}>\n        <Form.Label>{ props.title }</Form.Label>\n            <TypeAhead resource={props.resource} api={props.api} {...props}/>\n    </Form.Group>\n}\n*/\n\nclass FormikForm extends Component {\n\n    state = {\n        status: status.STATUS_ACTIVE,\n        hashSent: 0\n    }\n\n    onSubmit = (values) => {\n\n        console.log(\"FFF-FORM\", values)\n\n        const hashSent = 'ForMIK' +  this.props.resource + this.props.id + Date();\n        this.setState({status: status.STATUS_LOADING, hashSent: hashSent})\n        this.props.updateDetail(this.props.api, this.props.resource, this.props.id, values, hashSent);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const hash = this.state.hashSent;\n        if (hash === 0) return;\n        if ((this.props.hashUpdates[hash] !== undefined) && (this.state.status === status.STATUS_LOADING)) {\n            this.setState({status: status.STATUS_SUCCESS, hashSent: 0})\n        }\n\n    }\n\n\n\n    render() {\n\n        console.log(\"DODLO\", this.props)\n\n        if (this.state.status === status.STATUS_SUCCESS) {\n            if (this.updateData) { this.updateData(); }\n            else return <Redirect to={this.props.onSuccessLink}/>\n        }\n\n        const schemaPrep = {};\n        Object.entries(this.props.fieldList).map(x => schemaPrep[x[0]] = x[1].validation);\n\n        const schema = yup.object({...schemaPrep})\n        return (\n            <Formik\n              validationSchema = {schema}\n              onSubmit = { this.onSubmit }\n              initialValues = {{ ...this.props.initialValues }}\n\n              render={ props => {\n                  const fields = Object.entries(this.props.fieldList).map(field => {\n                       const key = field[0];\n                       const value = field[1];\n                       const type = field[1].type || \"text\";\n                       const inputProps = {\n                           name: key,\n                           type: type,\n                           title: value.title,\n                           sm: value.sm || 12,\n                           key,\n                           ...props,\n                           ...field[1]\n                       }\n\n                       switch(type){\n                           case 'text':\n                           case 'password':\n\n                               return <InputField {...inputProps } />\n\n                           case 'select':\n                               return <InputField {...inputProps } />\n\n\n                           case 'textarea':\n                               return <InputField {...inputProps } as={'textarea'}/>\n\n                           //case 'autocomplete':\n                           //    return <SelectTypeAhead {...inputProps}/>\n\n                           case 'checkbox':\n                               return <CheckBoxField {...inputProps}/>\n\n                       }\n\n                      });\n\n                  return <Form noValidate onSubmit={props.handleSubmit}>\n                      <Form.Row>\n                          { fields }\n                      </Form.Row>\n                      <Button type=\"submit\">Сохранить</Button>\n                  </Form>\n              }\n              }\n            />\n\n    );\n        }\n\n\n\n};\n\nconst mapStateToProps = (state) => ({\n    //hashUpdates:          getHashUpdates(state),\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n      //updateDetail:      (api, resource, id, file, hashSent) => dispatch(actions.updateDataLoaderDetail(api, resource, id, file, hashSent)),\n\n});\n\nexport default  connect(mapStateToProps, mapDispatchToProps)(FormikForm)\n\n"]},"metadata":{},"sourceType":"module"}